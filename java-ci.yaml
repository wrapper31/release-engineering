name: Java CI Template

on:
  workflow_call:
    inputs:
      secret_environment:
        description: 'GitHub Secret Environment Name'
        required: true
        type: string
    outputs:
      image_tag:
        description: "Image tag generated by CI"
        value: ${{ jobs.Build.outputs.image_tag }}

permissions:
  actions: read
  contents: read
  security-events: write

jobs:
  Code_Coverage_Test:
    runs-on: GM-SDV-DEV-Ubuntu-Latest-64
    if: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Lint & Static Analysis (Checkstyle + SpotBugs)
        run: |
          mvn checkstyle:checkstyle spotbugs:spotbugs || true
          mkdir -p reports
          cp target/checkstyle-result.xml reports/
          cp target/spotbugsXml.xml reports/

      - name: Run tests with coverage
        run: mvn test jacoco:report

      - name: Upload SARIF to Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ./linter-results.sarif  # Adjust if generating SARIF via converter

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@v2.3.0
        env:
          SONAR_TOKEN: ${{ secrets['SDV_INFRA_SONAR_TOKEN'] }}
          SONAR_HOST_URL: "https://sonar.gm.com"
        continue-on-error: true

      - name: Generate CTRF Test Report
        run: |
          npm install -g github-actions-ctrf
          mkdir -p reports
          cp target/surefire-reports/*.xml reports/  # Adjust path as per test report structure
          npx github-actions-ctrf reports/

  Build:
    runs-on: GM-SDV-PROD-Ubuntu-24.04-64
    needs: Code_Coverage_Test
    environment: ${{ inputs.secret_environment }}
    permissions:
      id-token: write
      contents: read
    defaults:
      run:
        shell: bash
    outputs:
      image_tag: ${{ steps.set-tag.outputs.image_tag }}
    env:
      VAULT_ADDR: ${{ vars.VAULT_ADDR }}
      VAULT_ROLE: ${{ vars.APP_DEPLOYERS_ROLE }}
      VAULT_NAMESPACE: ${{ vars.VAULT_NAMESPACE }}
      VAULT_PATH: ${{ vars.VAULT_JWT_GHA_BACKEND_PATH }}
      ACR_REGISTRY: ${{ vars.ACR_REGISTRY }}
      ACR_REPOSITORY: ${{ vars.ACR_REPOSITORY }}
      ACR_IMAGE_NAME: ${{ vars.ACR_IMAGE_NAME }}
      ACR_SERVER: ${{ vars.ACR_SERVER }}
      SUBSCRIPTION_ID: ${{ vars.SUBSCRIPTION_ID }}
      TENANT_ID: ${{ vars.TENANT_ID }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Retrieve Dynamic Secret
        id: retrieve-secrets
        uses: GM-InnerSource/ccoe-205219-az-dynamic-vault-creds-action@v1.0.1
        with:
          vault_auth_path: ${{ env.VAULT_PATH }}
          vault_role: ${{ env.VAULT_ROLE }}
          vault_address: ${{ env.VAULT_ADDR }}
          vault_namespace: ${{ env.VAULT_NAMESPACE }}

      - name: Set Var for TF_Module
        run: echo "TF_VAR_ARM_SUBSCRIPTION_ID=${{ env.SUBSCRIPTION_ID }}" >> $GITHUB_ENV

      - name: Azure login
        run: |
          for i in {1..3}; do
            echo "🔐 Attempt $i to login to Azure..."
            az login --service-principal \
              --username "${{ steps.retrieve-secrets.outputs.client_id }}" \
              --password "${{ steps.retrieve-secrets.outputs.client_secret }}" \
              --tenant "${{ vars.TENANT_ID }}" \
              --output none && break

            echo "❌ Login attempt $i failed."
            if [[ $i -eq 3 ]]; then
              echo "💥 All attempts failed."
              exit 1
            fi
            sleep 5
          done

      - name: Login to ACR
        run: az acr login --name ${{ env.ACR_REGISTRY }}

      - name: Set IMAGE_TAG
        run: |
          REPO_NAME=$(basename ${{ github.repository }} | tr '[:upper:]' '[:lower:]')
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          BRANCH=$(echo "${{ github.ref_name }}" | tr '[:upper:]' '[:lower:]' | sed 's/\//-/g')

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            IMAGE_TAG="pr-${{ github.event.pull_request.number }}-${SHORT_SHA}"
          else
            IMAGE_TAG="${BRANCH}-${SHORT_SHA}"
          fi

          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Build Docker Image
        env:
          IMAGE_NAME: "${{ env.ACR_IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
        run: docker build -t $IMAGE_NAME .

      - name: Push Docker Image to ACR
        env:
          ACR_SERVER: ${{ env.ACR_SERVER }}
          ACR_REPOSITORY: ${{ env.ACR_REPOSITORY }}
          IMAGE_NAME: "${{ env.ACR_IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
        run: |
          docker tag $IMAGE_NAME $ACR_SERVER/$ACR_REPOSITORY/$IMAGE_NAME
          docker push $ACR_SERVER/$ACR_REPOSITORY/$IMAGE_NAME

      - name: Set Image Tag
        id: set-tag
        run: echo "image_tag=${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT
